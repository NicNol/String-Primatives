Microsoft (R) Macro Assembler Version 14.29.30040.0	    08/08/21 13:24:24
<Project 6 - String Primitives and Macros     (Proj6_nolann.  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_nolann.asm)

				; Author: Nic Nolan
				; Last Modified: 08/04/2021
				; OSU email address: nolann@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: #6                Due Date: 08/13/2021
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				mGetString MACRO inputPrompt, inputString, inputLengthLimit, inputStringLength

					; Save register values
					push	EAX
					push	ECX
					push	EDX

					; Print input prompt
					mDisplayString inputPrompt

					; Get user input as string
					mov		EDX, inputString
					mov		ECX, inputLengthLimit
					call	ReadString						; Returns: EAX = Number of characters entered.
					mov		inputStringLength, EAX

					; Restore register values
					pop		EDX
					pop		ECX
					pop		EAX

				ENDM

				mDisplayString MACRO outputStringOffset

					; Save register values
					push	EDX

					; Print string
					mov		EDX, outputStringOffset
					call	WriteString

					; Restore register values
					pop		EDX

				ENDM

				; Constants
 = 00000003			INTEGER_COUNT = 3
 = 0000000F			MAX_INPUT_LENGTH = 15

 00000000			.data

				; Program Opening Identifiers
 00000000 50 72 6F 6A 65	programTitle		BYTE	"Project 6 - String Primitives and Macros", 13, 10, 0
	   63 74 20 36 20
	   2D 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   0D 0A 00
 0000002B 42 79 20 4E 69	programByline		BYTE	"By Nic Nolan", 13, 10, 13, 10, 0
	   63 20 4E 6F 6C
	   61 6E 0D 0A 0D
	   0A 00

				; Instruction Identifiers
 0000003C 48 65 6C 6C 6F	instruction1		BYTE	"Hello there. This program takes 10 signed integers from the user.", 13, 10
	   20 74 68 65 72
	   65 2E 20 54 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 74 61 6B 65
	   73 20 31 30 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 73
	   20 66 72 6F 6D
	   20 74 68 65 20
	   75 73 65 72 2E
	   0D 0A
 0000007F  49 74 20 74 68						BYTE	"It then displays the integers, their sum, and the rounded average of the numbers.", 13, 10
	   65 6E 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 20
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   20 6F 66 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   2E 0D 0A
 000000D2  45 61 63 68 20						BYTE	"Each integer must be in the range of -2147483648 to 2147483647 (1 signed 32-bit integer).",13, 10, 13, 10, 0
	   69 6E 74 65 67
	   65 72 20 6D 75
	   73 74 20 62 65
	   20 69 6E 20 74
	   68 65 20 72 61
	   6E 67 65 20 6F
	   66 20 2D 32 31
	   34 37 34 38 33
	   36 34 38 20 74
	   6F 20 32 31 34
	   37 34 38 33 36
	   34 37 20 28 31
	   20 73 69 67 6E
	   65 64 20 33 32
	   2D 62 69 74 20
	   69 6E 74 65 67
	   65 72 29 2E 0D
	   0A 0D 0A 00

				; Prompt Identifiers
 00000130 50 6C 65 61 73	inputRequest		BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00

				; Error Identifiers
 00000150 45 72 72 6F 72	inputErrorMsg		BYTE	"Error -- Please enter a valid signed integer.", 13, 10, 0
	   20 2D 2D 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 61 20 76
	   61 6C 69 64 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 2E
	   0D 0A 00

				; Input Identifiers
 00000180  0000000F [		userInput			BYTE	MAX_INPUT_LENGTH DUP(?)
	    00
	   ]
 0000018F 00000000		inputLength			DWORD	0
 00000193 00000000		inputErrorFlag		DWORD	0
 00000197 00000001		inputSign			SDWORD	1
 0000019B  00000003 [		inputArray			SDWORD	INTEGER_COUNT DUP(?)
	    00000000
	   ]

				; Output String Identifiers
 000001A7 59 6F 75 20 65	outputNumbers		BYTE	"You entered these numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 000001C4 54 68 65 20 73	outputSum			BYTE	"The sum of the numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 000001E0 54 68 65 20 72	outputAverage		BYTE	"The rounded average of all the numbers is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 61 6C
	   6C 20 74 68 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00

				; Goodbye Identifiers
 0000020C 54 68 61 6E 6B	goodbye				BYTE	"Thank you for using my program. Hasta Luego!", 13, 10, 0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   2E 20 48 61 73
	   74 61 20 4C 75
	   65 67 6F 21 0D
	   0A 00

 00000000			.code
 00000000			main PROC
					
					; Print Introduction
					mDisplayString	offset programTitle
 00000000  52		     1		push	EDX
 00000001  BA 00000000 R     1		mov		EDX, offset programTitle
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		EDX
					mDisplayString	offset programByline
 0000000C  52		     1		push	EDX
 0000000D  BA 0000002B R     1		mov		EDX, offset programByline
 00000012  E8 00000000 E     1		call	WriteString
 00000017  5A		     1		pop		EDX

					; Print Instructions
					mDisplayString	offset instruction1
 00000018  52		     1		push	EDX
 00000019  BA 0000003C R     1		mov		EDX, offset instruction1
 0000001E  E8 00000000 E     1		call	WriteString
 00000023  5A		     1		pop		EDX

					; Set up our looping registers
 00000024  B9 00000003			mov				ECX, INTEGER_COUNT
 00000029  BF 0000019B R		mov				EDI, offset inputArray

 0000002E			_getUserInput:
					
					; Solicit user input of signed integers
 0000002E  57				push			EDI
 0000002F  68 00000197 R		push			offset inputSign
 00000034  68 00000193 R		push			offset inputErrorFlag
 00000039  68 0000018F R		push			offset inputLength
 0000003E  68 00000180 R		push			offset userInput
 00000043  68 00000130 R		push			offset inputRequest
 00000048  E8 00000054			call			ReadVal

					; If invalid input, print error and retry
 0000004D  83 3D 00000193 R		cmp				inputErrorFlag, 0
	   00
 00000054  75 02			jne				_inputErrorMessage
 00000056  EB 18			jmp				_inputErrorMessageEnd

 00000058			_inputErrorMessage:

					mDisplayString	offset inputErrorMsg
 00000058  52		     1		push	EDX
 00000059  BA 00000150 R     1		mov		EDX, offset inputErrorMsg
 0000005E  E8 00000000 E     1		call	WriteString
 00000063  5A		     1		pop		EDX
 00000064  C7 05 00000193 R		mov				inputErrorFlag, 0
	   00000000
 0000006E  EB BE			jmp				_getUserInput

 00000070			_inputErrorMessageEnd:

					; Move EDI pointer to next array index
 00000070  83 C7 04			add				EDI, type SDWORD				

 00000073  E2 B9			loop			_getUserInput

					; Display output (numbers, sum, and rounded average)
 00000075  68 0000019B R		push			offset inputArray
 0000007A  68 000001E0 R		push			offset outputAverage
 0000007F  68 000001C4 R		push			offset outputSum
 00000084  68 000001A7 R		push			offset outputNumbers
 00000089  E8 0000014E			call			printOutput

					; Say goodbye
					mDisplayString offset goodbye
 0000008E  52		     1		push	EDX
 0000008F  BA 0000020C R     1		mov		EDX, offset goodbye
 00000094  E8 00000000 E     1		call	WriteString
 00000099  5A		     1		pop		EDX

					Invoke ExitProcess,0	; exit to operating system
 0000009A  6A 00	   *	    push   +000000000h
 0000009C  E8 00000000 E   *	    call   ExitProcess
 000000A1			main ENDP

 000000A1			ReadVal PROC uses EAX EBX ECX EDX ESI EDI
 000000A1  50		   *	    push   eax
 000000A2  53		   *	    push   ebx
 000000A3  51		   *	    push   ecx
 000000A4  52		   *	    push   edx
 000000A5  56		   *	    push   esi
 000000A6  57		   *	    push   edi
 000000A7  55				push			EBP
 000000A8  8B EC			mov				EBP, ESP

					; Invoke the mGetString macro to get user input in the form of a string of digits
					mGetString		[EBP + 32], [EBP + 36], MAX_INPUT_LENGTH, [EBP + 40]		; Parameters: inputPrompt, inputString, inputLengthLimit, InputLength
 000000AA  50		     1		push	EAX
 000000AB  51		     1		push	ECX
 000000AC  52		     1		push	EDX
 000000AD  52		     2		push	EDX
 000000AE  8B 55 20	     2		mov		EDX, [EBP + 32]
 000000B1  E8 00000000 E     2		call	WriteString
 000000B6  5A		     2		pop		EDX
 000000B7  8B 55 24	     1		mov		EDX, [EBP + 36]
 000000BA  B9 0000000F	     1		mov		ECX, MAX_INPUT_LENGTH
 000000BF  E8 00000000 E     1		call	ReadString						; Returns: EAX = Number of characters entered.
 000000C4  89 45 28	     1		mov		[EBP + 40], EAX
 000000C7  5A		     1		pop		EDX
 000000C8  59		     1		pop		ECX
 000000C9  58		     1		pop		EAX

					; Set up looping registers
 000000CA  8B 75 24			mov				ESI, [EBP + 36]
 000000CD  8B 4D 28			mov				ECX, [EBP + 40]

					; If no input or input too long, then raise error.
 000000D0  83 F9 00			cmp				ECX, 0
 000000D3  0F 8E 00000095		jle				_inputLengthError
 000000D9  83 F9 0C			cmp				ECX, 12
 000000DC  0F 8D 0000008C		jge				_inputLengthError

					; Reset EAX and load first ASCII character
 000000E2  B8 00000000			mov				EAX, 0
 000000E7  FC				cld
 000000E8  AC				lodsb

					; Check first character for sign
 000000E9  FF 75 30			push			[EBP + 48]								; inputSign offset
 000000EC  FF 75 2C			push			[EBP + 44]								; inputErrorFlag offset
 000000EF  50				push			EAX
 000000F0  E8 0000008E			call			validateFirstCharacter
					
					; Decrement ECX and verify it is greater than zero before checking next characters
 000000F5  49				dec				ECX
 000000F6  83 F9 00			cmp				ECX, 0
 000000F9  7E 1E			jle				_saveToArray

 000000FB			_nextCharacter:

					; Reset EAX and load next ASCII character
 000000FB  B8 00000000			mov				EAX, 0
 00000100  FC				cld
 00000101  AC				lodsb													; load string byte into AL

					; Validate ASCII character
 00000102  FF 75 2C			push			[EBP + 44]								; inputError offset
 00000105  50				push			EAX
 00000106  E8 000000AD			call			validateCharacter
					
					; If character was invalid, break loop
 0000010B  B8 00000000			mov				EAX, 0
 00000110  8B 55 2C			mov				EDX, [EBP + 44]
 00000113  3B 02			cmp				EAX, [EDX]
 00000115  75 62			jne				_endRead

 00000117  E2 E2			loop			_nextCharacter

 00000119			_saveToArray:

					; Set up registers
 00000119  8B 75 24			mov				ESI, [EBP + 36]					; Address of user input string
 0000011C  8B 7D 34			mov				EDI, [EBP + 52]					; Address of array index where result will go
 0000011F  8B 4D 28			mov				ECX, [EBP + 40]					; Length of string
 00000122  BB 00000000			mov				EBX, 0							; Starting value
 00000127  BA 00000001			mov				EDX, 1							; 10s place

					; Set ESI to last character
 0000012C  8B C1			mov				EAX, ECX
 0000012E  48				dec				EAX
 0000012F  03 F0			add				ESI, EAX

 00000131			_addInteger:
					; Reset EAX and load next ASCII character
 00000131  B8 00000000			mov				EAX, 0
 00000136  FD				std
 00000137  AC				lodsb

					; If character is a sign, check next character
 00000138  83 F8 2B			cmp				EAX, 2Bh		; + sign
 0000013B  74 1B			je				_multiplyBySignFlag
 0000013D  83 F8 2D			cmp				EAX, 2Dh		; - sign
 00000140  74 16			je				_multiplyBySignFlag

					; Convert ASCII to hex integer value
 00000142  83 E8 30			sub				EAX, 30h

					; Multiply by 10 ^ n
 00000145  52				push			EDX
 00000146  F7 EA			imul			EDX								; Result is stored in EDX:EAX
 00000148  03 D8			add				EBX, EAX

					; Set up next cycle
 0000014A  5A				pop				EDX
 0000014B  8B C2			mov				EAX, EDX
 0000014D  BA 0000000A			mov				EDX, 10
 00000152  F7 EA			imul			EDX
 00000154  8B D0			mov				EDX, EAX

 00000156  E2 D9			loop			_addInteger

 00000158			_multiplyBySignFlag:

					; Multiply by sign flag
 00000158  8B C3			mov				EAX, EBX
 0000015A  8B 5D 30			mov				EBX, [EBP + 48]					; sign (1 or -1)
 0000015D  8B 1B			mov				EBX, [EBX]
 0000015F  F7 EB			imul			EBX								; Result is stored in EDX:EAX

					; Reset sign flag
 00000161  8B 5D 30			mov				EBX, [EBP + 48]	
 00000164  C7 03 00000001		mov				sdword ptr [EBX], 1

					; Save integer value to array
 0000016A  89 07			mov				[EDI], EAX

 0000016C  EB 0B			jmp				_endRead

 0000016E			_inputLengthError:

					; Set Error Flag
 0000016E  8B 45 2C			mov				EAX, [EBP + 44]
 00000171  C7 00 00000001		mov				DWORD ptr [EAX], 1
 00000177  EB 00			jmp				_endRead

 00000179			_endRead:

 00000179  5D				pop				EBP
 0000017A  5F		   *	    pop    edi
 0000017B  5E		   *	    pop    esi
 0000017C  5A		   *	    pop    edx
 0000017D  59		   *	    pop    ecx
 0000017E  5B		   *	    pop    ebx
 0000017F  58		   *	    pop    eax
 00000180  C2 0018			ret				24
 00000183			ReadVal ENDP

 00000183			validateFirstCharacter PROC
 00000183  55				push			EBP
 00000184  8B EC			mov				EBP, ESP

					; Move ASCII character to EAX
 00000186  8B 45 08			mov				EAX, [EBP + 8]

					; Check if character is a plus or minus sign
 00000189  83 F8 2B			cmp				EAX, 2Bh		; + sign
 0000018C  74 26			je				_errorFirstCharEnd
 0000018E  83 F8 2D			cmp				EAX, 2Dh		; - sign
 00000191  74 0C			je				_minusSign

					; Check if character is in the range of 30 [0] to 39 [9]
 00000193  83 F8 30			cmp				EAX, 30h
 00000196  72 13			jb				_errorFirstChar
 00000198  83 F8 39			cmp				EAX, 39h
 0000019B  77 0E			ja				_errorFirstChar
 0000019D  EB 15			jmp				_errorFirstCharEnd

 0000019F			_minusSign:

					; Store the negative sign
 0000019F  8B 45 10			mov				EAX, [EBP + 16]
 000001A2  BA FFFFFFFF			mov				EDX, -1
 000001A7  89 10			mov				[EAX], EDX
 000001A9  EB 09			jmp				_errorFirstCharEnd

 000001AB			_errorFirstChar:
					
 000001AB  8B 45 0C			mov				EAX, [EBP + 12]
 000001AE  C7 00 00000001		mov				DWORD ptr [EAX], 1		; Set error flag

 000001B4			_errorFirstCharEnd:

 000001B4  5D				pop				EBP
 000001B5  C2 000C			ret				12
 000001B8			validateFirstCharacter ENDP

 000001B8			validateCharacter PROC
 000001B8  55				push			EBP
 000001B9  8B EC			mov				EBP, ESP

					; Move ASCII character to EAX
 000001BB  8B 45 08			mov				EAX, [EBP + 8]

					; Check if character is in the range of 48 [0] to 57 [9]
 000001BE  83 F8 30			cmp				EAX, 30h
 000001C1  72 07			jb				_error

 000001C3  83 F8 39			cmp				EAX, 39h
 000001C6  77 02			ja				_error

					; If character is in range, character is valid
 000001C8  EB 09			jmp				_errorEnd

 000001CA			_error:

 000001CA  8B 45 0C			mov				EAX, [EBP + 12]
 000001CD  C7 00 00000001		mov				DWORD ptr [EAX], 1		; Set error flag

 000001D3			_errorEnd:

 000001D3  5D				pop				EBP
 000001D4  C2 0008			ret				8
 000001D7			validateCharacter ENDP

 000001D7			WriteVal PROC
 000001D7  55				push			EBP
 000001D8  8B EC			mov				EBP, ESP

 000001DA  5D				pop				EBP
 000001DB  C3				ret		
 000001DC			WriteVal ENDP

 000001DC			printOutput PROC
 000001DC  55				push			EBP
 000001DD  8B EC			mov				EBP, ESP

					; Set up registers
 000001DF  B9 00000003			mov				ECX, INTEGER_COUNT
 000001E4  8B 75 14			mov				ESI, [EBP + 20]

					; Print Title for entered numbers
					mDisplayString	[EBP + 8]
 000001E7  52		     1		push	EDX
 000001E8  8B 55 08	     1		mov		EDX, [EBP + 8]
 000001EB  E8 00000000 E     1		call	WriteString
 000001F0  5A		     1		pop		EDX

 000001F1			_printNumber:
 000001F1  B8 00000000			mov				EAX, 0
 000001F6  AD				LODSD
 000001F7  E8 00000000 E		call			WriteInt
 000001FC  B0 2C			mov				AL, ','
 000001FE  E8 00000000 E		call			WriteChar
 00000203  B0 20			mov				AL, ' '
 00000205  E8 00000000 E		call			WriteChar
 0000020A  E2 E5			loop			_printNumber

 0000020C  5D				pop				EBP
 0000020D  C2 0010			ret				16
 00000210			printOutput ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30040.0	    08/08/21 13:24:24
<Project 6 - String Primitives and Macros     (Proj6_nolann.  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000023B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000210 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000A1 _TEXT	Length= 000000E2 Public STDCALL
  _nextCharacter . . . . . . . .	L Near	 000000FB _TEXT	
  _saveToArray . . . . . . . . .	L Near	 00000119 _TEXT	
  _addInteger  . . . . . . . . .	L Near	 00000131 _TEXT	
  _multiplyBySignFlag  . . . . .	L Near	 00000158 _TEXT	
  _inputLengthError  . . . . . .	L Near	 0000016E _TEXT	
  _endRead . . . . . . . . . . .	L Near	 00000179 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001D7 _TEXT	Length= 00000005 Public STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A1 Public STDCALL
  _getUserInput  . . . . . . . .	L Near	 0000002E _TEXT	
  _inputErrorMessage . . . . . .	L Near	 00000058 _TEXT	
  _inputErrorMessageEnd  . . . .	L Near	 00000070 _TEXT	
printOutput  . . . . . . . . . .	P Near	 000001DC _TEXT	Length= 00000034 Public STDCALL
  _printNumber . . . . . . . . .	L Near	 000001F1 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validateCharacter  . . . . . . .	P Near	 000001B8 _TEXT	Length= 0000001F Public STDCALL
  _error . . . . . . . . . . . .	L Near	 000001CA _TEXT	
  _errorEnd  . . . . . . . . . .	L Near	 000001D3 _TEXT	
validateFirstCharacter . . . . .	P Near	 00000183 _TEXT	Length= 00000035 Public STDCALL
  _minusSign . . . . . . . . . .	L Near	 0000019F _TEXT	
  _errorFirstChar  . . . . . . .	L Near	 000001AB _TEXT	
  _errorFirstCharEnd . . . . . .	L Near	 000001B4 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INTEGER_COUNT  . . . . . . . . .	Number	 00000003h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_INPUT_LENGTH . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000020C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 0000019B _DATA	
inputErrorFlag . . . . . . . . .	DWord	 00000193 _DATA	
inputErrorMsg  . . . . . . . . .	Byte	 00000150 _DATA	
inputLength  . . . . . . . . . .	DWord	 0000018F _DATA	
inputRequest . . . . . . . . . .	Byte	 00000130 _DATA	
inputSign  . . . . . . . . . . .	DWord	 00000197 _DATA	
instruction1 . . . . . . . . . .	Byte	 0000003C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputAverage  . . . . . . . . .	Byte	 000001E0 _DATA	
outputNumbers  . . . . . . . . .	Byte	 000001A7 _DATA	
outputSum  . . . . . . . . . . .	Byte	 000001C4 _DATA	
programByline  . . . . . . . . .	Byte	 0000002B _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	Byte	 00000180 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
