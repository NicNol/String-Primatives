Microsoft (R) Macro Assembler Version 14.29.30040.0	    08/09/21 11:34:42
<Project 6 - String Primitives and Macros     (Proj6_nolann.  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_nolann.asm)

				; Author: Nic Nolan
				; Last Modified: 08/09/2021
				; OSU email address: nolann@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: #6                Due Date: 08/13/2021
				; Description: This progam does the following:
				;	1) Requests 10 user-inputted signed-integers (32 bit signed max). Invalid integers require
				;		the user to input a new signed integer until the input is valid.
				;	2) Prints the 10 valid numbers the user entered.
				;	3) Calculates and prints the sum of the 10 numbers.
				;	4) Calculates and prints the rounded average of the 10 numbers.
				;	5) Says goodbye to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; --------------------------------------------------------------------------------- 
				; Name: mGetString 
				; 
				; Description: Prints an input prompt and gets input from the user.
				; 
				; Preconditions: All arguments should be initialized.
				; 
				; Receives: 
				;	inputPrompt			: Address offset of a string requesting user input.
				;	inputString			: Address offset where user input should be stored.
				;	inputLengthLimit	: The number of bytes that should be captured during user input.
				;	inputStringLength	: Address offset where the length of the user input should be stored.
				; 
				; Returns:
				;	inputString			: The user input is stored at the corresponding address offset.
				;	inputStringLength	: The length of the user input is stored at the corresponding address offset.
				; ---------------------------------------------------------------------------------
				mGetString MACRO inputPrompt, inputString, inputLengthLimit, inputStringLength

					; Save register values
					push	EAX
					push	ECX
					push	EDX

					; Print input prompt
					mDisplayString inputPrompt

					; Get and save user input
					mov		EDX, inputString
					mov		ECX, inputLengthLimit
					call	ReadString						; Returns: EAX = Number of characters entered.
					mov		inputStringLength, EAX

					; Restore register values
					pop		EDX
					pop		ECX
					pop		EAX

				ENDM

				; --------------------------------------------------------------------------------- 
				; Name: mDisplayString 
				; 
				; Description: Prints the argument string into the console window.
				; 
				; Preconditions: The argument string should be initialized.
				; 
				; Receives: 
				;	outputStringOffset	: Address offset of string to be printed.
				; 
				; Returns: The string is printed into the console window.
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO outputStringOffset

					; Save register values
					push	EDX

					; Print string
					mov		EDX, outputStringOffset
					call	WriteString

					; Restore register values
					pop		EDX

				ENDM

				; Constants
 = 0000000A			INTEGER_COUNT = 10
 = 0000000F			MAX_INPUT_LENGTH = 15

 00000000			.data

				; Program Opening Identifiers
 00000000 50 72 6F 6A 65	programTitle		BYTE	"Project 6 - String Primitives and Macros", 13, 10, 0
	   63 74 20 36 20
	   2D 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   0D 0A 00
 0000002B 42 79 20 4E 69	programByline		BYTE	"By Nic Nolan", 13, 10, 13, 10, 0
	   63 20 4E 6F 6C
	   61 6E 0D 0A 0D
	   0A 00

				; Instruction Identifiers
 0000003C 48 65 6C 6C 6F	instructions		BYTE	"Hello there. This program takes 10 signed integers from the user.", 13, 10
	   20 74 68 65 72
	   65 2E 20 54 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 74 61 6B 65
	   73 20 31 30 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 73
	   20 66 72 6F 6D
	   20 74 68 65 20
	   75 73 65 72 2E
	   0D 0A
 0000007F  49 74 20 74 68						BYTE	"It then displays the integers, their sum, and the rounded average of the numbers.", 13, 10
	   65 6E 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 20
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   20 6F 66 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   2E 0D 0A
 000000D2  45 61 63 68 20						BYTE	"Each integer must be in the range of -2147483648 to 2147483647 (1 signed 32-bit integer).",13, 10, 13, 10, 0
	   69 6E 74 65 67
	   65 72 20 6D 75
	   73 74 20 62 65
	   20 69 6E 20 74
	   68 65 20 72 61
	   6E 67 65 20 6F
	   66 20 2D 32 31
	   34 37 34 38 33
	   36 34 38 20 74
	   6F 20 32 31 34
	   37 34 38 33 36
	   34 37 20 28 31
	   20 73 69 67 6E
	   65 64 20 33 32
	   2D 62 69 74 20
	   69 6E 74 65 67
	   65 72 29 2E 0D
	   0A 0D 0A 00

				; Prompt Identifiers
 00000130 50 6C 65 61 73	inputRequest		BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00

				; Error Identifiers
 00000150 45 72 72 6F 72	inputErrorMsg		BYTE	"Error -- Please enter a valid signed integer.", 13, 10, 0
	   20 2D 2D 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 61 20 76
	   61 6C 69 64 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 2E
	   0D 0A 00

				; Input Identifiers
 00000180  0000000F [		userInput			BYTE	MAX_INPUT_LENGTH DUP(?)
	    00
	   ]
 0000018F 00000000		inputLength			DWORD	0
 00000193 00000000		inputErrorFlag		DWORD	0
 00000197 00000001		inputSign			SDWORD	1
 0000019B  0000000A [		inputArray			SDWORD	INTEGER_COUNT DUP(?)
	    00000000
	   ]

				; Output Identifiers
 000001C3 59 6F 75 20 65	outputNumbers		BYTE	"You entered these numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 000001E0 54 68 65 20 73	outputSum			BYTE	"The sum of the numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 000001FC 54 68 65 20 72	outputAverage		BYTE	"The rounded average of all the numbers is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 61 6C
	   6C 20 74 68 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 00000228  0000000F [		outputString		BYTE	MAX_INPUT_LENGTH DUP(?)
	    00
	   ]

				; Goodbye Identifiers
 00000237 54 68 61 6E 6B	goodbye				BYTE	"Thank you for using my program. Hasta Luego!", 13, 10, 0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   2E 20 48 61 73
	   74 61 20 4C 75
	   65 67 6F 21 0D
	   0A 00

 00000000			.code
 00000000			main PROC

				; ----------------------------------------------------
				; PRINT INTRODUCTION
				;
				;	Prints the project name and the author's name into
				;	the console window.
				; ---------------------------------------------------- 
					mDisplayString	offset programTitle
 00000000  52		     1		push	EDX
 00000001  BA 00000000 R     1		mov		EDX, offset programTitle
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		EDX
					mDisplayString	offset programByline
 0000000C  52		     1		push	EDX
 0000000D  BA 0000002B R     1		mov		EDX, offset programByline
 00000012  E8 00000000 E     1		call	WriteString
 00000017  5A		     1		pop		EDX

				; ---------------------------------------------------- 
				; PRINT INSTRUCTIONS
				;
				;	Prints the project instructions into the console
				;	window.
				; ---------------------------------------------------- 
					mDisplayString	offset instructions
 00000018  52		     1		push	EDX
 00000019  BA 0000003C R     1		mov		EDX, offset instructions
 0000001E  E8 00000000 E     1		call	WriteString
 00000023  5A		     1		pop		EDX

				; ----------------------------------------------------  
				; GET USER INPUT
				;
				;	This section prompts the user to input valid integers.
				;	If the user input is valid, it will continue requesting
				;	until INTEGER_COUNT of integers have been recorded.
				;
				;	If the user input is invalid, the user will be prompted
				;	to re-enter another integer until the input is valid.
				; ----------------------------------------------------

					; Set up looping registers
 00000024  B9 0000000A			mov				ECX, INTEGER_COUNT
 00000029  BF 0000019B R		mov				EDI, offset inputArray

 0000002E			_getUserInput:
					
					; Solicit user input of signed integers
 0000002E  68 00000150 R		push			offset inputErrorMsg
 00000033  57				push			EDI
 00000034  68 00000197 R		push			offset inputSign
 00000039  68 00000193 R		push			offset inputErrorFlag
 0000003E  68 0000018F R		push			offset inputLength
 00000043  68 00000180 R		push			offset userInput
 00000048  68 00000130 R		push			offset inputRequest
 0000004D  E8 00000040			call			ReadVal

					; Move EDI pointer to next array index
 00000052  83 C7 04			add				EDI, type SDWORD				

 00000055  E2 D7			loop			_getUserInput

				; ---------------------------------------------------- 
				; DISPLAY OUTPUT
				;
				;	This section does the following:
				;
				;	1. Prints each of the numbers entered by the user.
				;
				;	2. Calculate and prints the sum of the numbers
				;		entered by the user.
				;
				;	3. Calculate and prints the rounded average of the
				;		numbers entered by the user.
				; ----------------------------------------------------
 00000057  68 00000228 R		push			offset outputString
 0000005C  68 0000019B R		push			offset inputArray
 00000061  68 000001FC R		push			offset outputAverage
 00000066  68 000001E0 R		push			offset outputSum
 0000006B  68 000001C3 R		push			offset outputNumbers
 00000070  E8 00000226			call			printOutput

				; ----------------------------------------------------
				; SAY GOODBYE
				;
				;	Prints the goodbye message into the console window.
				; ----------------------------------------------------
 00000075  E8 00000000 E		call			CrLf
 0000007A  E8 00000000 E		call			CrLf
					mDisplayString	offset goodbye
 0000007F  52		     1		push	EDX
 00000080  BA 00000237 R     1		mov		EDX, offset goodbye
 00000085  E8 00000000 E     1		call	WriteString
 0000008A  5A		     1		pop		EDX

					Invoke ExitProcess,0	; exit to operating system
 0000008B  6A 00	   *	    push   +000000000h
 0000008D  E8 00000000 E   *	    call   ExitProcess
 00000092			main ENDP

				; --------------------------------------------------------------------------------- 
				; Name: ReadVal 
				;  
				; Description: This procedure prompts the user to input integers. Valid integers are
				;				converted from strings to their SDWORD equivalents and saved to an
				;				address location. 
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 32] -> Address offset of input request prompt.
				;			[EBP + 36] -> Address offset of where user string input should be saved.
				;			[EBP + 40] -> Address offset of where the user input string length should be saved.
				;			[EBP + 44] -> Address offset of where the input error flag should be saved.
				;			[EBP + 48] -> Address offset of where the sign of user input should be saved.
				;			[EBP + 52] -> Address offset of where the converted SDWORD value should be saved.
				;			[EBP + 56] -> Address offset of input error message.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 36] -> Address offset of where user string input is saved.
				;			[EBP + 40] -> Address offset of where the user input string length is saved.
				;			[EBP + 44] -> Address offset of where the input error flag is saved.
				;			[EBP + 48] -> Address offset of where the sign of user input is saved.
				;			[EBP + 52] -> Address offset of where the converted SDWORD value is saved.
				; ---------------------------------------------------------------------------------
 00000092			ReadVal PROC uses EAX EBX ECX EDX ESI EDI
 00000092  50		   *	    push   eax
 00000093  53		   *	    push   ebx
 00000094  51		   *	    push   ecx
 00000095  52		   *	    push   edx
 00000096  56		   *	    push   esi
 00000097  57		   *	    push   edi
 00000098  55				push			EBP
 00000099  8B EC			mov				EBP, ESP

 0000009B			_getInput:

					; Invoke the mGetString macro to get user input in the form of a string of digits
					mGetString		[EBP + 32], [EBP + 36], MAX_INPUT_LENGTH, [EBP + 40]		; Parameters: inputPrompt, inputString, inputLengthLimit, InputLength
 0000009B  50		     1		push	EAX
 0000009C  51		     1		push	ECX
 0000009D  52		     1		push	EDX
 0000009E  52		     2		push	EDX
 0000009F  8B 55 20	     2		mov		EDX, [EBP + 32]
 000000A2  E8 00000000 E     2		call	WriteString
 000000A7  5A		     2		pop		EDX
 000000A8  8B 55 24	     1		mov		EDX, [EBP + 36]
 000000AB  B9 0000000F	     1		mov		ECX, MAX_INPUT_LENGTH
 000000B0  E8 00000000 E     1		call	ReadString						; Returns: EAX = Number of characters entered.
 000000B5  89 45 28	     1		mov		[EBP + 40], EAX
 000000B8  5A		     1		pop		EDX
 000000B9  59		     1		pop		ECX
 000000BA  58		     1		pop		EAX

					; Validate the string
 000000BB  FF 75 30			push			[EBP + 48]						; Address offset of sign
 000000BE  FF 75 2C			push			[EBP + 44]						; Address offset of error flag
 000000C1  FF 75 28			push			[EBP + 40]						; Address offset of input string length
 000000C4  FF 75 24			push			[EBP + 36]						; Address offset of input string
 000000C7  E8 0000008E			call			validateString

					; If invalid input, print error and retry
 000000CC  8B 45 2C			mov				EAX, [EBP + 44]
 000000CF  8B 00			mov				EAX, [EAX]
 000000D1  83 F8 00			cmp				EAX, 0
 000000D4  75 02			jnz				_inputErrorMessage
 000000D6  EB 15			jmp				_inputErrorMessageEnd

 000000D8			_inputErrorMessage:

					mDisplayString	[EBP + 56]
 000000D8  52		     1		push	EDX
 000000D9  8B 55 38	     1		mov		EDX, [EBP + 56]
 000000DC  E8 00000000 E     1		call	WriteString
 000000E1  5A		     1		pop		EDX
 000000E2  8B 45 2C			mov				EAX, [EBP + 44]
 000000E5  C7 00 00000000		mov				DWORD ptr [EAX], 0								; Reset error flag
 000000EB  EB AE			jmp				_getInput

 000000ED			_inputErrorMessageEnd:

					; Save the input as a SDWORD

 000000ED			_saveToArray:

					; Set up registers
 000000ED  8B 75 24			mov				ESI, [EBP + 36]					; Address of user input string
 000000F0  8B 7D 34			mov				EDI, [EBP + 52]					; Address of array index where result will go
 000000F3  8B 4D 28			mov				ECX, [EBP + 40]					; Length of string
 000000F6  BB 00000000			mov				EBX, 0							; Starting value
 000000FB  BA 00000001			mov				EDX, 1							; 10s place

					; Set ESI to last character
 00000100  8B C1			mov				EAX, ECX
 00000102  48				dec				EAX
 00000103  03 F0			add				ESI, EAX

 00000105			_addInteger:
					; Reset EAX and load next ASCII character
 00000105  B8 00000000			mov				EAX, 0
 0000010A  FD				std
 0000010B  AC				lodsb

					; If character is a sign, check next character
 0000010C  83 F8 2B			cmp				EAX, 2Bh		; + sign
 0000010F  74 1D			je				_multiplyBySignFlag
 00000111  83 F8 2D			cmp				EAX, 2Dh		; - sign
 00000114  74 18			je				_multiplyBySignFlag

					; Convert ASCII to hex integer value
 00000116  83 E8 30			sub				EAX, 30h

					; Multiply by 10 ^ n
 00000119  52				push			EDX
 0000011A  F7 EA			imul			EDX								; Result is stored in EDX:EAX
 0000011C  03 D8			add				EBX, EAX

					; Jump to error if overflow
 0000011E  70 24			jo				_overflowError

					; Set up next cycle
 00000120  5A				pop				EDX
 00000121  8B C2			mov				EAX, EDX
 00000123  BA 0000000A			mov				EDX, 10
 00000128  F7 EA			imul			EDX
 0000012A  8B D0			mov				EDX, EAX

 0000012C  E2 D7			loop			_addInteger

 0000012E			_multiplyBySignFlag:

					; Multiply by sign flag
 0000012E  8B C3			mov				EAX, EBX
 00000130  8B 5D 30			mov				EBX, [EBP + 48]					; sign (1 or -1)
 00000133  8B 1B			mov				EBX, [EBX]
 00000135  F7 EB			imul			EBX								; Result is stored in EDX:EAX

					; Reset sign flag
 00000137  8B 5D 30			mov				EBX, [EBP + 48]	
 0000013A  C7 03 00000001		mov				sdword ptr [EBX], 1

					; Save integer value to array
 00000140  89 07			mov				[EDI], EAX

 00000142  EB 0C			jmp				_endRead

 00000144			_overflowError:

					; Fix stack
 00000144  5A				pop				EDX

					; Set Error Flag
 00000145  8B 45 2C			mov				EAX, [EBP + 44]
 00000148  C7 00 00000001		mov				DWORD ptr [EAX], 1

 0000014E  EB 00			jmp				_endRead

 00000150			_endRead:

 00000150  5D				pop				EBP
 00000151  5F		   *	    pop    edi
 00000152  5E		   *	    pop    esi
 00000153  5A		   *	    pop    edx
 00000154  59		   *	    pop    ecx
 00000155  5B		   *	    pop    ebx
 00000156  58		   *	    pop    eax
 00000157  C2 001C			ret				28
 0000015A			ReadVal ENDP

				; --------------------------------------------------------------------------------- 
				; Name: validateString
				;  
				; Description: This procedure prompts the user to input integers. Valid integers are
				;				converted from strings to their SDWORD equivalents and saved to an
				;				address location. 
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: 
				;			[EBP + 24] -> Address offset of where user string input is saved.
				;			[EBP + 28] -> Address offset of where the user input string length is saved.
				;			[EBP + 32] -> Address offset of where the input error flag should be saved.
				;			[EBP + 36] -> Address offset of where the sign of user input should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 32] -> Address offset of where the input error flag is saved.
				;			[EBP + 36] -> Address offset of where the sign of user input is saved.
				; ---------------------------------------------------------------------------------
 0000015A			validateString PROC uses EAX ECX EDX ESI
 0000015A  50		   *	    push   eax
 0000015B  51		   *	    push   ecx
 0000015C  52		   *	    push   edx
 0000015D  56		   *	    push   esi
 0000015E  55				push			EBP
 0000015F  8B EC			mov				EBP, ESP

					; Set up looping registers
 00000161  8B 75 18			mov				ESI, [EBP + 24]							; Input string address
 00000164  8B 4D 1C			mov				ECX, [EBP + 28]							; Input string length

					; If no input or input too long, then raise error.
 00000167  83 F9 00			cmp				ECX, 0
 0000016A  7E 3E			jle				_inputLengthError
 0000016C  83 F9 0C			cmp				ECX, 12
 0000016F  7D 39			jge				_inputLengthError

					; Reset EAX and load first ASCII character
 00000171  B8 00000000			mov				EAX, 0
 00000176  FC				cld
 00000177  AC				lodsb

					; Check first character for sign
 00000178  FF 75 24			push			[EBP + 36]								; inputSign offset
 0000017B  FF 75 20			push			[EBP + 32]								; inputErrorFlag offset
 0000017E  50				push			EAX
 0000017F  E8 00000037			call			validateFirstCharacter
					
					; Decrement ECX and verify it is greater than zero before checking next characters
 00000184  49				dec				ECX
 00000185  83 F9 00			cmp				ECX, 0
 00000188  7E 29			jle				_validateEnd

 0000018A			_nextCharacter:

					; Reset EAX and load next ASCII character
 0000018A  B8 00000000			mov				EAX, 0
 0000018F  FC				cld
 00000190  AC				lodsb													; load string byte into AL

					; Validate ASCII character
 00000191  FF 75 20			push			[EBP + 32]								; inputError offset
 00000194  50				push			EAX
 00000195  E8 0000005A			call			validateCharacter
					
					; If character was invalid, break loop
 0000019A  B8 00000000			mov				EAX, 0
 0000019F  8B 55 20			mov				EDX, [EBP + 32]
 000001A2  3B 02			cmp				EAX, [EDX]
 000001A4  75 0D			jne				_validateEnd

 000001A6  E2 E2			loop			_nextCharacter
					
 000001A8  EB 09			jmp				_validateEnd

 000001AA			_inputLengthError:

					; Set Error Flag
 000001AA  8B 45 20			mov				EAX, [EBP + 32]
 000001AD  C7 00 00000001		mov				DWORD ptr [EAX], 1

 000001B3			_validateEnd:

 000001B3  5D				pop				EBP
 000001B4  5E		   *	    pop    esi
 000001B5  5A		   *	    pop    edx
 000001B6  59		   *	    pop    ecx
 000001B7  58		   *	    pop    eax
 000001B8  C2 0010			ret				16
 000001BB			validateString ENDP


				; --------------------------------------------------------------------------------- 
				; Name: validateFirstCharacter 
				;  
				; Description: This procedure validates the first character of a user string input.
				;				It allows characters that are +, -, or numerical inputs (in ASCII).
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 16] -> ASCII character byte (hexadecimal)
				;			[EBP + 20] -> Address offset of where the input error flag should be saved.
				;			[EBP + 24] -> Address offset of where the sign of the user input should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 20] -> Address offset of where the input error flag is saved.
				;			[EBP + 24] -> Address offset of where the sign of the user input is saved.
				; ---------------------------------------------------------------------------------
 000001BB			validateFirstCharacter PROC uses EAX EDX
 000001BB  50		   *	    push   eax
 000001BC  52		   *	    push   edx
 000001BD  55				push			EBP
 000001BE  8B EC			mov				EBP, ESP

					; Move ASCII character to EAX
 000001C0  8B 45 10			mov				EAX, [EBP + 16]

					; Check if character is a plus or minus sign
 000001C3  83 F8 2B			cmp				EAX, 2Bh		; + sign
 000001C6  74 26			je				_errorFirstCharEnd
 000001C8  83 F8 2D			cmp				EAX, 2Dh		; - sign
 000001CB  74 0C			je				_minusSign

					; Check if character is in the range of 30 [0] to 39 [9]
 000001CD  83 F8 30			cmp				EAX, 30h
 000001D0  72 13			jb				_errorFirstChar
 000001D2  83 F8 39			cmp				EAX, 39h
 000001D5  77 0E			ja				_errorFirstChar
 000001D7  EB 15			jmp				_errorFirstCharEnd

 000001D9			_minusSign:

					; Store the negative sign
 000001D9  8B 45 18			mov				EAX, [EBP + 24]
 000001DC  BA FFFFFFFF			mov				EDX, -1
 000001E1  89 10			mov				[EAX], EDX
 000001E3  EB 09			jmp				_errorFirstCharEnd

 000001E5			_errorFirstChar:
					
 000001E5  8B 45 14			mov				EAX, [EBP + 20]
 000001E8  C7 00 00000001		mov				DWORD ptr [EAX], 1		; Set error flag

 000001EE			_errorFirstCharEnd:

 000001EE  5D				pop				EBP
 000001EF  5A		   *	    pop    edx
 000001F0  58		   *	    pop    eax
 000001F1  C2 000C			ret				12
 000001F4			validateFirstCharacter ENDP

				; --------------------------------------------------------------------------------- 
				; Name: validateCharacter 
				;  
				; Description: This procedure validates a character of a user string input.
				;				It allows characters that are numerical inputs (in ASCII).
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 12] -> ASCII character byte (hexadecimal)
				;			[EBP + 16] -> Address offset of where the input error flag should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 16] -> Address offset of where the input error flag is saved.
				; ---------------------------------------------------------------------------------
 000001F4			validateCharacter PROC uses EAX
 000001F4  50		   *	    push   eax
 000001F5  55				push			EBP
 000001F6  8B EC			mov				EBP, ESP

					; Move ASCII character to EAX
 000001F8  8B 45 0C			mov				EAX, [EBP + 12]

					; Check if character is in the range of 48 [0] to 57 [9]
 000001FB  83 F8 30			cmp				EAX, 30h
 000001FE  72 07			jb				_error
 00000200  83 F8 39			cmp				EAX, 39h
 00000203  77 02			ja				_error

					; If character is in range, character is valid
 00000205  EB 09			jmp				_errorEnd

 00000207			_error:

					; Set error flag
 00000207  8B 45 10			mov				EAX, [EBP + 16]
 0000020A  C7 00 00000001		mov				DWORD ptr [EAX], 1		

 00000210			_errorEnd:

 00000210  5D				pop				EBP
 00000211  58		   *	    pop    eax
 00000212  C2 0008			ret				8
 00000215			validateCharacter ENDP

				; --------------------------------------------------------------------------------- 
				; Name: WriteVal 
				;  
				; Description: This procedure converts signed double word (SDWORD) integer values to
				;				strings and prints them to the console.
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 28] -> SDWORD value to convert to string
				;			[EBP + 32] -> Address offset of where output string should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 32] -> Address offset of where output string is saved.
				; ---------------------------------------------------------------------------------
 00000215			WriteVal PROC uses EAX EBX ECX EDX EDI
 00000215  50		   *	    push   eax
 00000216  53		   *	    push   ebx
 00000217  51		   *	    push   ecx
 00000218  52		   *	    push   edx
 00000219  57		   *	    push   edi
 0000021A  55				push			EBP
 0000021B  8B EC			mov				EBP, ESP

					; Set up registers
 0000021D  8B 55 1C			mov				EDX, [EBP + 28]							; Integer value to convert to string
 00000220  8B 7D 20			mov				EDI, [EBP + 32]							; Output Array
 00000223  B9 0000000A			mov				ECX, 10									; Maximum number of loops required
 00000228  BB 3B9ACA00			mov				EBX, 1000000000							; Greatest possible divisor 10 ^ 9

 0000022D  83 F8 00			cmp				EAX, 0
 00000230  7C 02			jl				_negativeNumber
 00000232  EB 08			jmp				_getChar

 00000234			_negativeNumber:

 00000234  F7 DA			neg				EDX
 00000236  B8 0000002D			mov				EAX, '-'
 0000023B  AA				STOSB			

 0000023C			_getChar:
					
					; Get leading digit
 0000023C  8B C2			mov				EAX, EDX
 0000023E  99				cdq
 0000023F  F7 F3			div				EBX										; Quotient = EAX. Remainder = EDX.
					
					; Save remainder
 00000241  52				push			EDX

					; If leading digit is zero, ensure it is not the first recorded digit
 00000242  83 F8 00			cmp				EAX, 0
 00000245  75 19			jne				_saveChar
 00000247  50				push			EAX
 00000248  53				push			EBX
 00000249  8B 45 20			mov				EAX, [EBP + 32]

 0000024C			_checkNextChar:

					; See if character written to output is non-zero
 0000024C  8A 18			mov				BL, BYTE PTR [EAX]
 0000024E  80 FB 31			cmp				BL, 31h
 00000251  7D 0B			jge				_nonLeadingZero

					; If not, check next character
 00000253  40				inc				EAX
 00000254  3B F8			cmp				EDI, EAX
 00000256  7E 02			jle				_leadingZero
 00000258  EB F2			jmp				_checkNextChar

 0000025A			_leadingZero:

					; Restore registers
 0000025A  5B				pop				EBX
 0000025B  58				pop				EAX

 0000025C  EB 06			jmp				_saveCharEnd

 0000025E			_nonLeadingZero:

					; Restore registers
 0000025E  5B				pop				EBX
 0000025F  58				pop				EAX

 00000260			_saveChar:

					; Save digit to output array
 00000260  83 C0 30			add				EAX, 30h
 00000263  AA				STOSB

 00000264			_saveCharEnd:

					; Divide EBX (integer divisor) by 10
 00000264  8B C3			mov				EAX, EBX
 00000266  99				cdq
 00000267  BB 0000000A			mov				EBX, 10
 0000026C  F7 F3			div				EBX
 0000026E  8B D8			mov				EBX, EAX

					; Restore remainder 
 00000270  5A				pop				EDX

 00000271  E2 C9			loop _getChar

					; Terminate string
 00000273  B8 00000000			mov			EAX, 0
 00000278  AA				STOSB

					; Display output string
					mDisplayString	[EBP + 32]
 00000279  52		     1		push	EDX
 0000027A  8B 55 20	     1		mov		EDX, [EBP + 32]
 0000027D  E8 00000000 E     1		call	WriteString
 00000282  5A		     1		pop		EDX

					; Clear output string
 00000283  B9 0000000F			mov				ECX, MAX_INPUT_LENGTH
 00000288  8B 7D 20			mov				EDI, [EBP + 32]
 0000028B  B8 00000000			mov				EAX, 0
 00000290  F3/ AA			rep				STOSB

 00000292  5D				pop				EBP
 00000293  5F		   *	    pop    edi
 00000294  5A		   *	    pop    edx
 00000295  59		   *	    pop    ecx
 00000296  5B		   *	    pop    ebx
 00000297  58		   *	    pop    eax
 00000298  C2 0008			ret				8
 0000029B			WriteVal ENDP

				; --------------------------------------------------------------------------------- 
				; Name: printOutput 
				;  
				; Description: This procedure prints each of the numbers in the argument array. It
				;				then calculates and prints the sum of the numbers, as well as the
				;				rounded average of the numbers.
				; 
				; Preconditions: Argument addresses should be valid.
				; 
				; Postconditions: Registers are restored after procedure call. Data at addresses should be initialized.
				; 
				; Receives: [EBP + 28] -> Address offset of title for entered numbers ("You entered these numbers: ").
				;			[EBP + 32] -> Address offset of title for sum of numbers ("The sum is: ").
				;			[EBP + 36] -> Address offset of title for average of numbers ("The average is: ").
				;			[EBP + 40] -> Address offset of the array of numbers to be displayed, summed, and averaged.
				;			[EBP + 44] -> Address offset of where each output string should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 44] -> Address offset of where each output string should be saved.
				; ---------------------------------------------------------------------------------
 0000029B			printOutput PROC uses EAX EBX ECX EDX ESI
 0000029B  50		   *	    push   eax
 0000029C  53		   *	    push   ebx
 0000029D  51		   *	    push   ecx
 0000029E  52		   *	    push   edx
 0000029F  56		   *	    push   esi
 000002A0  55				push			EBP
 000002A1  8B EC			mov				EBP, ESP

					; Set up registers
 000002A3  B9 0000000A			mov				ECX, INTEGER_COUNT
 000002A8  8B 75 28			mov				ESI, [EBP + 40]

					; Print Title for entered numbers
 000002AB  E8 00000000 E		call			CrLf
					mDisplayString	[EBP + 28]
 000002B0  52		     1		push	EDX
 000002B1  8B 55 1C	     1		mov		EDX, [EBP + 28]
 000002B4  E8 00000000 E     1		call	WriteString
 000002B9  5A		     1		pop		EDX

 000002BA			_printNumber:

					; Move next index value into EAX
 000002BA  AD				LODSD

					; Write number value as a string
 000002BB  FF 75 2C			push			[EBP + 44]							; Output string offset
 000002BE  50				push			EAX									; Integer Value to convert to string
 000002BF  E8 FFFFFF51			call			WriteVal

					; Unless we're on the last number, print a comma and a space between numbers
 000002C4  83 F9 01			cmp				ECX, 1
 000002C7  74 10			je				_calculateSum

 000002C9  B0 2C			mov				AL, ','
 000002CB  E8 00000000 E		call			WriteChar
 000002D0  B0 20			mov				AL, ' '
 000002D2  E8 00000000 E		call			WriteChar
 000002D7  E2 E1			loop			_printNumber

 000002D9			_calculateSum:

					; Set up registers
 000002D9  B9 0000000A			mov				ECX, INTEGER_COUNT
 000002DE  8B 75 28			mov				ESI, [EBP + 40]
 000002E1  BB 00000000			mov				EBX, 0								; Store Sum
 000002E6			_sumNext:

					; Load next array value into EAX
 000002E6  AD				LODSD
 000002E7  03 D8			add				EBX, EAX
 000002E9  E2 FB			loop			_sumNext

					; Display Sum Title
 000002EB  E8 00000000 E		call			CrLf
 000002F0  E8 00000000 E		call			CrLf
					mDisplayString	[EBP + 32]
 000002F5  52		     1		push	EDX
 000002F6  8B 55 20	     1		mov		EDX, [EBP + 32]
 000002F9  E8 00000000 E     1		call	WriteString
 000002FE  5A		     1		pop		EDX

					; Display Sum
 000002FF  8B C3			mov				EAX, EBX
 00000301  FF 75 2C			push			[EBP + 44]							; Output string offset
 00000304  50				push			EAX									; Integer Value to convert to string
 00000305  E8 FFFFFF0B			call			WriteVal

 0000030A			_calculateAverage:

					; Divide Sum by number of intergers entered by the user
 0000030A  BB 0000000A			mov				EBX, INTEGER_COUNT
 0000030F  99				cdq
 00000310  F7 FB			idiv			EBX									; Quotient = EAX. Remainder = EDX.

					; Display Average Title
 00000312  E8 00000000 E		call			CrLf
 00000317  E8 00000000 E		call			CrLf
					mDisplayString	[EBP + 36]
 0000031C  52		     1		push	EDX
 0000031D  8B 55 24	     1		mov		EDX, [EBP + 36]
 00000320  E8 00000000 E     1		call	WriteString
 00000325  5A		     1		pop		EDX

					; Display Average
 00000326  FF 75 2C			push			[EBP + 44]							; Output string offset
 00000329  50				push			EAX									; Integer Value to convert to string
 0000032A  E8 FFFFFEE6			call			WriteVal

 0000032F  5D				pop				EBP
 00000330  5E		   *	    pop    esi
 00000331  5A		   *	    pop    edx
 00000332  59		   *	    pop    ecx
 00000333  5B		   *	    pop    ebx
 00000334  58		   *	    pop    eax
 00000335  C2 0010			ret				16
 00000338			printOutput ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30040.0	    08/09/21 11:34:42
<Project 6 - String Primitives and Macros     (Proj6_nolann.  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000266 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000338 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000092 _TEXT	Length= 000000C8 Public STDCALL
  _getInput  . . . . . . . . . .	L Near	 0000009B _TEXT	
  _inputErrorMessage . . . . . .	L Near	 000000D8 _TEXT	
  _inputErrorMessageEnd  . . . .	L Near	 000000ED _TEXT	
  _saveToArray . . . . . . . . .	L Near	 000000ED _TEXT	
  _addInteger  . . . . . . . . .	L Near	 00000105 _TEXT	
  _multiplyBySignFlag  . . . . .	L Near	 0000012E _TEXT	
  _overflowError . . . . . . . .	L Near	 00000144 _TEXT	
  _endRead . . . . . . . . . . .	L Near	 00000150 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000215 _TEXT	Length= 00000086 Public STDCALL
  _negativeNumber  . . . . . . .	L Near	 00000234 _TEXT	
  _getChar . . . . . . . . . . .	L Near	 0000023C _TEXT	
  _checkNextChar . . . . . . . .	L Near	 0000024C _TEXT	
  _leadingZero . . . . . . . . .	L Near	 0000025A _TEXT	
  _nonLeadingZero  . . . . . . .	L Near	 0000025E _TEXT	
  _saveChar  . . . . . . . . . .	L Near	 00000260 _TEXT	
  _saveCharEnd . . . . . . . . .	L Near	 00000264 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000092 Public STDCALL
  _getUserInput  . . . . . . . .	L Near	 0000002E _TEXT	
printOutput  . . . . . . . . . .	P Near	 0000029B _TEXT	Length= 0000009D Public STDCALL
  _printNumber . . . . . . . . .	L Near	 000002BA _TEXT	
  _calculateSum  . . . . . . . .	L Near	 000002D9 _TEXT	
  _sumNext . . . . . . . . . . .	L Near	 000002E6 _TEXT	
  _calculateAverage  . . . . . .	L Near	 0000030A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validateCharacter  . . . . . . .	P Near	 000001F4 _TEXT	Length= 00000021 Public STDCALL
  _error . . . . . . . . . . . .	L Near	 00000207 _TEXT	
  _errorEnd  . . . . . . . . . .	L Near	 00000210 _TEXT	
validateFirstCharacter . . . . .	P Near	 000001BB _TEXT	Length= 00000039 Public STDCALL
  _minusSign . . . . . . . . . .	L Near	 000001D9 _TEXT	
  _errorFirstChar  . . . . . . .	L Near	 000001E5 _TEXT	
  _errorFirstCharEnd . . . . . .	L Near	 000001EE _TEXT	
validateString . . . . . . . . .	P Near	 0000015A _TEXT	Length= 00000061 Public STDCALL
  _nextCharacter . . . . . . . .	L Near	 0000018A _TEXT	
  _inputLengthError  . . . . . .	L Near	 000001AA _TEXT	
  _validateEnd . . . . . . . . .	L Near	 000001B3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INTEGER_COUNT  . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_INPUT_LENGTH . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000237 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 0000019B _DATA	
inputErrorFlag . . . . . . . . .	DWord	 00000193 _DATA	
inputErrorMsg  . . . . . . . . .	Byte	 00000150 _DATA	
inputLength  . . . . . . . . . .	DWord	 0000018F _DATA	
inputRequest . . . . . . . . . .	Byte	 00000130 _DATA	
inputSign  . . . . . . . . . . .	DWord	 00000197 _DATA	
instructions . . . . . . . . . .	Byte	 0000003C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputAverage  . . . . . . . . .	Byte	 000001FC _DATA	
outputNumbers  . . . . . . . . .	Byte	 000001C3 _DATA	
outputString . . . . . . . . . .	Byte	 00000228 _DATA	
outputSum  . . . . . . . . . . .	Byte	 000001E0 _DATA	
programByline  . . . . . . . . .	Byte	 0000002B _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	Byte	 00000180 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
