Microsoft (R) Macro Assembler Version 14.29.30040.0	    08/09/21 15:24:09
<Project 6 - String Primitives and Macros     (Proj6_nolann.  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_nolann.asm)

				; Author: Nic Nolan
				; Last Modified: 08/09/2021
				; OSU email address: nolann@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: #6                Due Date: 08/13/2021
				; Description: This progam does the following:
				;	1) Requests 10 user-inputted signed-integers (32 bit signed max). Invalid integers require
				;		the user to input a new signed integer until the input is valid.
				;	2) Prints the 10 valid numbers the user entered.
				;	3) Calculates and prints the sum of the 10 numbers.
				;	4) Calculates and prints the rounded average of the 10 numbers.
				;	5) Says goodbye to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; --------------------------------------------------------------------------------- 
				; Name: mGetString 
				; 
				; Description: Prints an input prompt and gets input from the user.
				; 
				; Preconditions: All arguments should be initialized.
				; 
				; Receives: 
				;	inputPrompt			: Address offset of a string requesting user input.
				;	inputString			: Address offset where user input should be stored.
				;	inputLengthLimit	: The number of bytes that should be captured during user input.
				;	inputStringLength	: Address offset where the length of the user input should be stored.
				; 
				; Returns:
				;	inputString			: The user input is stored at the corresponding address offset.
				;	inputStringLength	: The length of the user input is stored at the corresponding address offset.
				; ---------------------------------------------------------------------------------
				mGetString MACRO inputPrompt, inputString, inputLengthLimit, inputStringLength, outputStringOffset, inputTotalString, inputTotal, inputNumber

					; Save register values
					push			EAX
					push			ECX
					push			EDX

					; Print current total
					call			CrLf
					mDisplayString	inputTotalString
					push			outputStringOffset
					push			inputTotal
					call			WriteVal
					call			CrLf

					; Print input prompt
					mDisplayString	inputPrompt
					push			outputStringOffset
					push			inputNumber
					call			WriteVal
					mov				AL, ':'
					call			WriteChar
					mov				AL, ' '
					call			WriteChar

					; Get and save user input
					mov				EDX, inputString
					mov				ECX, inputLengthLimit
					call			ReadString					; Returns: EAX = Number of characters entered.
					mov				inputStringLength, EAX

					; Restore register values
					pop				EDX
					pop				ECX
					pop				EAX

				ENDM

				; --------------------------------------------------------------------------------- 
				; Name: mDisplayString 
				; 
				; Description: Prints the argument string into the console window.
				; 
				; Preconditions: The argument string should be initialized.
				; 
				; Receives: 
				;	outputStringOffset	: Address offset of string to be printed.
				; 
				; Returns: The string is printed into the console window.
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO outputStringOffset

					; Save register values
					push			EDX

					; Print string
					mov				EDX, outputStringOffset
					call			WriteString

					; Restore register values
					pop				EDX

				ENDM

				; Constants
 = 0000000A			INTEGER_COUNT = 10
 = 0000000F			MAX_INPUT_LENGTH = 15

 00000000			.data

				; Program Opening Identifiers
 00000000 50 72 6F 6A 65	programTitle		BYTE	"Project 6 - String Primitives and Macros", 13, 10, 0
	   63 74 20 36 20
	   2D 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   0D 0A 00
 0000002B 42 79 20 4E 69	programByline		BYTE	"By Nic Nolan", 13, 10, 13, 10, 0
	   63 20 4E 6F 6C
	   61 6E 0D 0A 0D
	   0A 00

				; Instruction Identifiers
 0000003C 48 65 6C 6C 6F	instructions		BYTE	"Hello there. This program takes 10 signed integers from the user.", 13, 10
	   20 74 68 65 72
	   65 2E 20 54 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 74 61 6B 65
	   73 20 31 30 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 73
	   20 66 72 6F 6D
	   20 74 68 65 20
	   75 73 65 72 2E
	   0D 0A
 0000007F  49 74 20 74 68						BYTE	"It then displays the integers, their sum, and the rounded average of the numbers.", 13, 10
	   65 6E 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 20
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   20 6F 66 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   2E 0D 0A
 000000D2  45 61 63 68 20						BYTE	"Each integer must be in the range of -2147483647 to 2147483647 (1 signed 32-bit integer).",13, 10, 13, 10, 0
	   69 6E 74 65 67
	   65 72 20 6D 75
	   73 74 20 62 65
	   20 69 6E 20 74
	   68 65 20 72 61
	   6E 67 65 20 6F
	   66 20 2D 32 31
	   34 37 34 38 33
	   36 34 37 20 74
	   6F 20 32 31 34
	   37 34 38 33 36
	   34 37 20 28 31
	   20 73 69 67 6E
	   65 64 20 33 32
	   2D 62 69 74 20
	   69 6E 74 65 67
	   65 72 29 2E 0D
	   0A 0D 0A 00

				; Prompt Identifiers
 00000130 43 75 72 72 65	inputTotal			BYTE	"Current Total is: ", 0
	   6E 74 20 54 6F
	   74 61 6C 20 69
	   73 3A 20 00
 00000143 50 6C 65 61 73	inputRequest		BYTE	"Please enter signed integer #", 0
	   65 20 65 6E 74
	   65 72 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 20 23 00

				; Error Identifiers
 00000161 45 72 72 6F 72	inputErrorMsg		BYTE	"Error -- Please enter a valid signed integer.", 13, 10, 0
	   20 2D 2D 20 50
	   6C 65 61 73 65
	   20 65 6E 74 65
	   72 20 61 20 76
	   61 6C 69 64 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 2E
	   0D 0A 00

				; Input Identifiers
 00000191  0000000F [		userInput			BYTE	MAX_INPUT_LENGTH DUP(?)
	    00
	   ]
 000001A0 00000000		inputLength			DWORD	0
 000001A4 00000000		inputErrorFlag		DWORD	0
 000001A8 00000001		inputSign			SDWORD	1
 000001AC  0000000A [		inputArray			SDWORD	INTEGER_COUNT DUP(?)
	    00000000
	   ]

				; Output Identifiers
 000001D4 59 6F 75 20 65	outputNumbers		BYTE	"You entered these numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 000001F1 54 68 65 20 73	outputSum			BYTE	"The sum of the numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 0000020D 54 68 65 20 72	outputAverage		BYTE	"The rounded average of all the numbers is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 61 6C
	   6C 20 74 68 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 00000239  0000000F [		outputString		BYTE	MAX_INPUT_LENGTH DUP(?)
	    00
	   ]

				; Goodbye Identifiers
 00000248 54 68 61 6E 6B	goodbye				BYTE	"Thank you for using my program. Hasta Luego!", 13, 10, 0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   2E 20 48 61 73
	   74 61 20 4C 75
	   65 67 6F 21 0D
	   0A 00

 00000000			.code
 00000000			main PROC

				; ----------------------------------------------------
				; PRINT INTRODUCTION
				;
				;	Prints the project name and the author's name into
				;	the console window.
				; ---------------------------------------------------- 
					mDisplayString	offset programTitle
 00000000  52		     1		push			EDX
 00000001  BA 00000000 R     1		mov				EDX, offset programTitle
 00000006  E8 00000000 E     1		call			WriteString
 0000000B  5A		     1		pop				EDX
					mDisplayString	offset programByline
 0000000C  52		     1		push			EDX
 0000000D  BA 0000002B R     1		mov				EDX, offset programByline
 00000012  E8 00000000 E     1		call			WriteString
 00000017  5A		     1		pop				EDX

				; ---------------------------------------------------- 
				; PRINT INSTRUCTIONS
				;
				;	Prints the project instructions into the console
				;	window.
				; ---------------------------------------------------- 
					mDisplayString	offset instructions
 00000018  52		     1		push			EDX
 00000019  BA 0000003C R     1		mov				EDX, offset instructions
 0000001E  E8 00000000 E     1		call			WriteString
 00000023  5A		     1		pop				EDX

				; ----------------------------------------------------  
				; GET USER INPUT
				;
				;	This section prompts the user to input valid integers.
				;	If the user input is valid, it will continue requesting
				;	until INTEGER_COUNT of integers have been recorded.
				;
				;	If the user input is invalid, the user will be prompted
				;	to re-enter another integer until the input is valid.
				; ----------------------------------------------------

					; Set up looping registers
 00000024  B9 0000000A			mov				ECX, INTEGER_COUNT
 00000029  BF 000001AC R		mov				EDI, offset inputArray

 0000002E			_getUserInput:
					
					; Solicit user input of signed integers
 0000002E  68 00000130 R		push			offset inputTotal
 00000033  68 000001AC R		push			offset inputArray
 00000038  51				push			ECX
 00000039  68 00000239 R		push			offset outputString
 0000003E  68 00000161 R		push			offset inputErrorMsg
 00000043  57				push			EDI
 00000044  68 000001A8 R		push			offset inputSign
 00000049  68 000001A4 R		push			offset inputErrorFlag
 0000004E  68 000001A0 R		push			offset inputLength
 00000053  68 00000191 R		push			offset userInput
 00000058  68 00000143 R		push			offset inputRequest
 0000005D  E8 00000040			call			ReadVal

					; Move EDI pointer to next array index
 00000062  83 C7 04			add				EDI, type SDWORD				

 00000065  E2 C7			loop			_getUserInput

				; ---------------------------------------------------- 
				; DISPLAY OUTPUT
				;
				;	This section does the following:
				;
				;	1. Prints each of the numbers entered by the user.
				;
				;	2. Calculate and prints the sum of the numbers
				;		entered by the user.
				;
				;	3. Calculate and prints the rounded average of the
				;		numbers entered by the user.
				; ----------------------------------------------------
 00000067  68 00000239 R		push			offset outputString
 0000006C  68 000001AC R		push			offset inputArray
 00000071  68 0000020D R		push			offset outputAverage
 00000076  68 000001F1 R		push			offset outputSum
 0000007B  68 000001D4 R		push			offset outputNumbers
 00000080  E8 000002AF			call			printOutput

				; ----------------------------------------------------
				; SAY GOODBYE
				;
				;	Prints the goodbye message into the console window.
				; ----------------------------------------------------
 00000085  E8 00000000 E		call			CrLf
 0000008A  E8 00000000 E		call			CrLf
					mDisplayString	offset goodbye
 0000008F  52		     1		push			EDX
 00000090  BA 00000248 R     1		mov				EDX, offset goodbye
 00000095  E8 00000000 E     1		call			WriteString
 0000009A  5A		     1		pop				EDX

					Invoke ExitProcess,0	; exit to operating system
 0000009B  6A 00	   *	    push   +000000000h
 0000009D  E8 00000000 E   *	    call   ExitProcess
 000000A2			main ENDP

				; --------------------------------------------------------------------------------- 
				; Name: ReadVal 
				;  
				; Description: This procedure prompts the user to input integers. Valid integers are
				;				converted from strings to their SDWORD equivalents and saved to an
				;				address location. 
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 32] -> Address offset of input request prompt.
				;			[EBP + 36] -> Address offset of where user string input should be saved.
				;			[EBP + 40] -> Address offset of where the user input string length should be saved.
				;			[EBP + 44] -> Address offset of where the input error flag should be saved.
				;			[EBP + 48] -> Address offset of where the sign of user input should be saved.
				;			[EBP + 52] -> Address offset of where the converted SDWORD value should be saved.
				;			[EBP + 56] -> Address offset of input error message.
				;			[EBP + 60] -> Address offset of output string for WriteVal
				;			[EBP + 64] -> ECX value
				;			[EBP + 68] -> Address offset of input array
				;			[EBP + 72] -> Address offset of input total message
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 36] -> Address offset of where user string input is saved.
				;			[EBP + 40] -> Address offset of where the user input string length is saved.
				;			[EBP + 44] -> Address offset of where the input error flag is saved.
				;			[EBP + 48] -> Address offset of where the sign of user input is saved.
				;			[EBP + 52] -> Address offset of where the converted SDWORD value is saved.
				; ---------------------------------------------------------------------------------
 000000A2			ReadVal PROC uses EAX EBX ECX EDX ESI EDI
 000000A2  50		   *	    push   eax
 000000A3  53		   *	    push   ebx
 000000A4  51		   *	    push   ecx
 000000A5  52		   *	    push   edx
 000000A6  56		   *	    push   esi
 000000A7  57		   *	    push   edi
 000000A8  55				push			EBP
 000000A9  8B EC			mov				EBP, ESP

 000000AB			_getInput:

					; Calculate current input number
 000000AB  B8 0000000A			mov				EAX, INTEGER_COUNT
 000000B0  2B 45 40			sub				EAX, [EBP + 64]
 000000B3  40				inc				EAX
 000000B4  50				push			EAX

					; Calculate current sum
					; Set up registers
 000000B5  8B C8			mov				ECX, EAX
 000000B7  8B 75 44			mov				ESI, [EBP + 68]
 000000BA  BB 00000000			mov				EBX, 0								; Store Sum

 000000BF			_sumNextInteger:
					; Load next array value into EAX
 000000BF  B8 00000000			mov				EAX, 0
 000000C4  FC				cld
 000000C5  AD				LODSD
 000000C6  03 D8			add				EBX, EAX
 000000C8  E2 F5			loop			_sumNextInteger
 000000CA  58				pop				EAX

					; Invoke the mGetString macro to get user input in the form of a string of digits
					mGetString		[EBP + 32], [EBP + 36], MAX_INPUT_LENGTH, [EBP + 40], [EBP + 60], [EBP + 72], EBX, EAX
 000000CB  50		     1		push			EAX
 000000CC  51		     1		push			ECX
 000000CD  52		     1		push			EDX
 000000CE  E8 00000000 E     1		call			CrLf
 000000D3  52		     2		push			EDX
 000000D4  8B 55 48	     2		mov				EDX, [EBP + 72]
 000000D7  E8 00000000 E     2		call			WriteString
 000000DC  5A		     2		pop				EDX
 000000DD  FF 75 3C	     1		push			[EBP + 60]
 000000E0  53		     1		push			EBX
 000000E1  E8 000001C3	     1		call			WriteVal
 000000E6  E8 00000000 E     1		call			CrLf
 000000EB  52		     2		push			EDX
 000000EC  8B 55 20	     2		mov				EDX, [EBP + 32]
 000000EF  E8 00000000 E     2		call			WriteString
 000000F4  5A		     2		pop				EDX
 000000F5  FF 75 3C	     1		push			[EBP + 60]
 000000F8  50		     1		push			EAX
 000000F9  E8 000001AB	     1		call			WriteVal
 000000FE  B0 3A	     1		mov				AL, ':'
 00000100  E8 00000000 E     1		call			WriteChar
 00000105  B0 20	     1		mov				AL, ' '
 00000107  E8 00000000 E     1		call			WriteChar
 0000010C  8B 55 24	     1		mov				EDX, [EBP + 36]
 0000010F  B9 0000000F	     1		mov				ECX, MAX_INPUT_LENGTH
 00000114  E8 00000000 E     1		call			ReadString					; Returns: EAX = Number of characters entered.
 00000119  89 45 28	     1		mov				[EBP + 40], EAX
 0000011C  5A		     1		pop				EDX
 0000011D  59		     1		pop				ECX
 0000011E  58		     1		pop				EAX

					; Validate the string
 0000011F  FF 75 30			push			[EBP + 48]							; Address offset of sign
 00000122  FF 75 2C			push			[EBP + 44]							; Address offset of error flag
 00000125  FF 75 28			push			[EBP + 40]							; Address offset of input string length
 00000128  FF 75 24			push			[EBP + 36]							; Address offset of input string
 0000012B  E8 0000004A			call			validateString

					; If invalid input, print error and retry
 00000130  8B 45 2C			mov				EAX, [EBP + 44]
 00000133  8B 00			mov				EAX, [EAX]
 00000135  83 F8 00			cmp				EAX, 0
 00000138  75 1E			jne				_errorMessage

					; Save the input as a SDWORD
 0000013A  FF 75 34			push			[EBP + 52]							; Address offset of where SDWORD should be saved
 0000013D  FF 75 30			push			[EBP + 48]							; Address offset of sign
 00000140  FF 75 2C			push			[EBP + 44]							; Address offset of error flag
 00000143  FF 75 28			push			[EBP + 40]							; Address offset of input string length
 00000146  FF 75 24			push			[EBP + 36]							; Address offset of input string
 00000149  E8 000000E7			call			stringToSDWORD

					; Check there is no overflow error
 0000014E  8B 45 2C			mov				EAX, [EBP + 44]
 00000151  8B 00			mov				EAX, [EAX]
 00000153  83 F8 00			cmp				EAX, 0
 00000156  74 18			je				_errorMessageEnd

 00000158			_errorMessage:

					; Display error message
					mDisplayString	[EBP + 56]
 00000158  52		     1		push			EDX
 00000159  8B 55 38	     1		mov				EDX, [EBP + 56]
 0000015C  E8 00000000 E     1		call			WriteString
 00000161  5A		     1		pop				EDX

					; Reset error flag
 00000162  8B 45 2C			mov				EAX, [EBP + 44]
 00000165  C7 00 00000000		mov				DWORD ptr [EAX], 0

 0000016B  E9 FFFFFF3B			jmp				_getInput

 00000170			_errorMessageEnd:

 00000170  5D				pop				EBP
 00000171  5F		   *	    pop    edi
 00000172  5E		   *	    pop    esi
 00000173  5A		   *	    pop    edx
 00000174  59		   *	    pop    ecx
 00000175  5B		   *	    pop    ebx
 00000176  58		   *	    pop    eax
 00000177  C2 002C			ret				44
 0000017A			ReadVal ENDP

				; --------------------------------------------------------------------------------- 
				; Name: validateString
				;  
				; Description: This procedure checks each character in the argument string to ensure
				;				it is valid. If it is not, the error flag is set.
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: 
				;			[EBP + 24] -> Address offset of where user string input is saved.
				;			[EBP + 28] -> Address offset of where the user input string length is saved.
				;			[EBP + 32] -> Address offset of where the input error flag should be saved.
				;			[EBP + 36] -> Address offset of where the sign of user input should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 32] -> Address offset of where the input error flag is saved.
				;			[EBP + 36] -> Address offset of where the sign of user input is saved.
				; ---------------------------------------------------------------------------------
 0000017A			validateString PROC uses EAX ECX EDX ESI
 0000017A  50		   *	    push   eax
 0000017B  51		   *	    push   ecx
 0000017C  52		   *	    push   edx
 0000017D  56		   *	    push   esi
 0000017E  55				push			EBP
 0000017F  8B EC			mov				EBP, ESP

					; Set up looping registers
 00000181  8B 75 18			mov				ESI, [EBP + 24]						; Input string address
 00000184  8B 4D 1C			mov				ECX, [EBP + 28]						; Input string length

					; If no input or input too long, then raise error.
 00000187  83 F9 00			cmp				ECX, 0
 0000018A  7E 3E			jle				_inputLengthError
 0000018C  83 F9 0C			cmp				ECX, 12
 0000018F  7D 39			jge				_inputLengthError

					; Reset EAX and load first ASCII character
 00000191  B8 00000000			mov				EAX, 0
 00000196  FC				cld
 00000197  AC				lodsb

					; Check first character for sign
 00000198  FF 75 24			push			[EBP + 36]							; inputSign offset
 0000019B  FF 75 20			push			[EBP + 32]							; inputErrorFlag offset
 0000019E  50				push			EAX
 0000019F  E8 00000037			call			validateFirstCharacter
					
					; Decrement ECX and verify it is greater than zero before checking next characters
 000001A4  49				dec				ECX
 000001A5  83 F9 00			cmp				ECX, 0
 000001A8  7E 29			jle				_validateEnd

 000001AA			_nextCharacter:

					; Reset EAX and load next ASCII character
 000001AA  B8 00000000			mov				EAX, 0
 000001AF  FC				cld
 000001B0  AC				lodsb												; load string byte into AL

					; Validate ASCII character
 000001B1  FF 75 20			push			[EBP + 32]							; inputError offset
 000001B4  50				push			EAX
 000001B5  E8 0000005A			call			validateCharacter
					
					; If character was invalid, break loop
 000001BA  B8 00000000			mov				EAX, 0
 000001BF  8B 55 20			mov				EDX, [EBP + 32]
 000001C2  3B 02			cmp				EAX, [EDX]
 000001C4  75 0D			jne				_validateEnd

 000001C6  E2 E2			loop			_nextCharacter
					
 000001C8  EB 09			jmp				_validateEnd

 000001CA			_inputLengthError:

					; Set Error Flag
 000001CA  8B 45 20			mov				EAX, [EBP + 32]
 000001CD  C7 00 00000001		mov				DWORD ptr [EAX], 1

 000001D3			_validateEnd:

 000001D3  5D				pop				EBP
 000001D4  5E		   *	    pop    esi
 000001D5  5A		   *	    pop    edx
 000001D6  59		   *	    pop    ecx
 000001D7  58		   *	    pop    eax
 000001D8  C2 0010			ret				16
 000001DB			validateString ENDP

				; --------------------------------------------------------------------------------- 
				; Name: validateFirstCharacter 
				;  
				; Description: This procedure validates the first character of a user string input.
				;				It allows characters that are +, -, or numerical inputs (in ASCII).
				;				If the character is not valid, the error flag is set.
				;				If a negative sign is found, the sign flag is set to -1.
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 16] -> ASCII character byte (hexadecimal)
				;			[EBP + 20] -> Address offset of where the input error flag should be saved.
				;			[EBP + 24] -> Address offset of where the sign of the user input should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 20] -> Address offset of where the input error flag is saved.
				;			[EBP + 24] -> Address offset of where the sign of the user input is saved.
				; ---------------------------------------------------------------------------------
 000001DB			validateFirstCharacter PROC uses EAX EDX
 000001DB  50		   *	    push   eax
 000001DC  52		   *	    push   edx
 000001DD  55				push			EBP
 000001DE  8B EC			mov				EBP, ESP

					; Move ASCII character to EAX
 000001E0  8B 45 10			mov				EAX, [EBP + 16]

					; Check if character is a plus or minus sign
 000001E3  83 F8 2B			cmp				EAX, 2Bh		; + sign
 000001E6  74 26			je				_errorFirstCharEnd
 000001E8  83 F8 2D			cmp				EAX, 2Dh		; - sign
 000001EB  74 0C			je				_minusSign

					; Check if character is in the range of 30 [0] to 39 [9]
 000001ED  83 F8 30			cmp				EAX, 30h
 000001F0  72 13			jb				_errorFirstChar
 000001F2  83 F8 39			cmp				EAX, 39h
 000001F5  77 0E			ja				_errorFirstChar
 000001F7  EB 15			jmp				_errorFirstCharEnd

 000001F9			_minusSign:

					; Set the sign flag to -1
 000001F9  8B 45 18			mov				EAX, [EBP + 24]
 000001FC  BA FFFFFFFF			mov				EDX, -1
 00000201  89 10			mov				[EAX], EDX
 00000203  EB 09			jmp				_errorFirstCharEnd

 00000205			_errorFirstChar:
					
					; Set error flag
 00000205  8B 45 14			mov				EAX, [EBP + 20]
 00000208  C7 00 00000001		mov				DWORD ptr [EAX], 1

 0000020E			_errorFirstCharEnd:

 0000020E  5D				pop				EBP
 0000020F  5A		   *	    pop    edx
 00000210  58		   *	    pop    eax
 00000211  C2 000C			ret				12
 00000214			validateFirstCharacter ENDP

				; --------------------------------------------------------------------------------- 
				; Name: validateCharacter 
				;  
				; Description: This procedure validates a character of a user string input.
				;				It allows characters that are numerical inputs (in ASCII).
				;				If the character is not valid, the error flag is set.
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 12] -> ASCII character byte (hexadecimal)
				;			[EBP + 16] -> Address offset of where the input error flag should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 16] -> Address offset of where the input error flag is saved.
				; ---------------------------------------------------------------------------------
 00000214			validateCharacter PROC uses EAX
 00000214  50		   *	    push   eax
 00000215  55				push			EBP
 00000216  8B EC			mov				EBP, ESP

					; Move ASCII character to EAX
 00000218  8B 45 0C			mov				EAX, [EBP + 12]

					; Check if character is in the range of 48 [0] to 57 [9]
 0000021B  83 F8 30			cmp				EAX, 30h
 0000021E  72 07			jb				_error
 00000220  83 F8 39			cmp				EAX, 39h
 00000223  77 02			ja				_error

					; If character is in range, character is valid
 00000225  EB 09			jmp				_errorEnd

 00000227			_error:

					; Set error flag
 00000227  8B 45 10			mov				EAX, [EBP + 16]
 0000022A  C7 00 00000001		mov				DWORD ptr [EAX], 1		

 00000230			_errorEnd:

 00000230  5D				pop				EBP
 00000231  58		   *	    pop    eax
 00000232  C2 0008			ret				8
 00000235			validateCharacter ENDP

				; --------------------------------------------------------------------------------- 
				; Name: stringToSDWORD 
				;  
				; Description: This procedure converts a string to a signed double word (SDWORD) value.
				;				If the value is too large, the error flag is set.
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives:
				;			[EBP + 32] -> Address offset of where user string input should be saved.
				;			[EBP + 36] -> Address offset of where the user input string length should be saved.
				;			[EBP + 40] -> Address offset of where the input error flag should be saved.
				;			[EBP + 44] -> Address offset of where the sign of user input should be saved.
				;			[EBP + 48] -> Address offset of where the converted SDWORD value should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 40] -> Address offset of where the input error flag is saved.
				;			[EBP + 48] -> Address offset of where the converted SDWORD value is saved.
				; ---------------------------------------------------------------------------------
 00000235			stringToSDWORD PROC uses EAX EBX ECX EDX ESI EDI
 00000235  50		   *	    push   eax
 00000236  53		   *	    push   ebx
 00000237  51		   *	    push   ecx
 00000238  52		   *	    push   edx
 00000239  56		   *	    push   esi
 0000023A  57		   *	    push   edi
 0000023B  55				push			EBP
 0000023C  8B EC			mov				EBP, ESP

					; Set up registers
 0000023E  8B 75 20			mov				ESI, [EBP + 32]						; Address of user input string
 00000241  8B 7D 30			mov				EDI, [EBP + 48]						; Address of array index where result will go
 00000244  8B 4D 24			mov				ECX, [EBP + 36]						; Length of string
 00000247  BB 00000000			mov				EBX, 0								; Starting value
 0000024C  BA 00000001			mov				EDX, 1								; 10s place

					; Set ESI to last character
 00000251  8B C1			mov				EAX, ECX
 00000253  48				dec				EAX
 00000254  03 F0			add				ESI, EAX

 00000256			_addInteger:
					; Reset EAX and load next ASCII character
 00000256  B8 00000000			mov				EAX, 0
 0000025B  FD				std
 0000025C  AC				lodsb

					; If character is a sign, we are at the end of the string.
 0000025D  83 F8 2B			cmp				EAX, 2Bh		; + sign
 00000260  74 1D			je				_multiplyBySignFlag
 00000262  83 F8 2D			cmp				EAX, 2Dh		; - sign
 00000265  74 18			je				_multiplyBySignFlag

					; Convert ASCII to hex integer value
 00000267  83 E8 30			sub				EAX, 30h

					; Multiply integer value by 10 ^ n
 0000026A  52				push			EDX
 0000026B  F7 EA			imul			EDX									; Result is stored in EDX:EAX
 0000026D  03 D8			add				EBX, EAX

					; Jump to error if overflow
 0000026F  70 24			jo				_overflowError

					; Set up next cycle
 00000271  5A				pop				EDX
 00000272  8B C2			mov				EAX, EDX
 00000274  BA 0000000A			mov				EDX, 10
 00000279  F7 EA			imul			EDX
 0000027B  8B D0			mov				EDX, EAX

 0000027D  E2 D7			loop			_addInteger

 0000027F			_multiplyBySignFlag:

					; Multiply final integer by its sign flag
 0000027F  8B C3			mov				EAX, EBX
 00000281  8B 5D 2C			mov				EBX, [EBP + 44]						; sign (1 or -1)
 00000284  8B 1B			mov				EBX, [EBX]
 00000286  F7 EB			imul			EBX									; Result is stored in EDX:EAX

					; Reset sign flag
 00000288  8B 5D 2C			mov				EBX, [EBP + 44]	
 0000028B  C7 03 00000001		mov				sdword ptr [EBX], 1

					; Save integer value to array
 00000291  89 07			mov				[EDI], EAX

 00000293  EB 0A			jmp				_stringToSDWORDEnd

 00000295			_overflowError:

					; Fix stack
 00000295  5A				pop				EDX

					; Set Error Flag
 00000296  8B 45 28			mov				EAX, [EBP + 40]
 00000299  C7 00 00000001		mov				DWORD ptr [EAX], 1

 0000029F			_stringToSDWORDEnd:

 0000029F  5D				pop				EBP
 000002A0  5F		   *	    pop    edi
 000002A1  5E		   *	    pop    esi
 000002A2  5A		   *	    pop    edx
 000002A3  59		   *	    pop    ecx
 000002A4  5B		   *	    pop    ebx
 000002A5  58		   *	    pop    eax
 000002A6  C2 0014			ret				20
 000002A9			stringToSDWORD ENDP

				; --------------------------------------------------------------------------------- 
				; Name: WriteVal 
				;  
				; Description: This procedure converts signed double word (SDWORD) integer values to
				;				strings and prints them to the console.
				; 
				; Preconditions: Argument addresses should be valid. Data at addresses should be initialized.
				; 
				; Postconditions: Registers are restored after procedure call.
				; 
				; Receives: [EBP + 28] -> SDWORD value to convert to string
				;			[EBP + 32] -> Address offset of where output string should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 32] -> Address offset of where output string is saved.
				; ---------------------------------------------------------------------------------
 000002A9			WriteVal PROC uses EAX EBX ECX EDX EDI
 000002A9  50		   *	    push   eax
 000002AA  53		   *	    push   ebx
 000002AB  51		   *	    push   ecx
 000002AC  52		   *	    push   edx
 000002AD  57		   *	    push   edi
 000002AE  55				push			EBP
 000002AF  8B EC			mov				EBP, ESP

					; Set up registers
 000002B1  8B 55 1C			mov				EDX, [EBP + 28]						; Integer value to convert to string
 000002B4  8B 7D 20			mov				EDI, [EBP + 32]						; Output Array
 000002B7  B9 0000000A			mov				ECX, 10								; Maximum number of loops required
 000002BC  BB 3B9ACA00			mov				EBX, 1000000000						; Greatest possible divisor 10 ^ 9

					; Check if SDWORD is a negative number
 000002C1  83 FA 00			cmp				EDX, 0
 000002C4  7C 02			jl				_negativeNumber
 000002C6  EB 08			jmp				_getChar

 000002C8			_negativeNumber:
					
					; Convert integer to twos complement
 000002C8  F7 DA			neg				EDX

					; Save first output character as a minus symbol
 000002CA  B8 0000002D			mov				EAX, '-'
 000002CF  AA				STOSB			

				; ---------------------------------------------------- 
				; GET AND SAVE LEADING DIGIT OF INTEGER INPUT
				;
				;	This section does the following:
				;
				;	1. Gets the leading digit of the integer input.
				;
				;	2. Converts the leading digit to ASCII.
				;
				;	3. Saves the ASCII character as a BYTE to the output string.
				;
				;	4. The remainder becomes the new input.
				;
				;	5. Repeat steps 1 - 4 until we reach the end of the integer.
				; ----------------------------------------------------
 000002D0			_getChar:
					
					; Get leading digit
 000002D0  8B C2			mov				EAX, EDX
 000002D2  99				cdq
 000002D3  F7 F3			div				EBX									; Quotient = EAX. Remainder = EDX.
					
					; Save remainder
 000002D5  52				push			EDX

					; If leading digit is not zero, or it is the last digit, we always save it.
 000002D6  83 F8 00			cmp				EAX, 0
 000002D9  75 1E			jne				_saveChar
 000002DB  83 F9 01			cmp				ECX, 1
 000002DE  74 19			je				_saveChar

					; Otherwise, prepare to check if there are other recorded digits before we save the zero
 000002E0  50				push			EAX
 000002E1  53				push			EBX
 000002E2  8B 45 20			mov				EAX, [EBP + 32]

				; ---------------------------------------------------- 
				; CHECK FOR NON-ZERO DIGIT IN OUTPUT STRING
				;
				;	Because we are dividing the integer input by a large
				;	number each time, inputs that are less than 10
				;	digits in length would have leading zeros if we
				;	input them normally. IE: 123 --> 0000000123.
				;
				;	This is undesirable, so we ensure that a digit has
				;	been recorded to the output before we add any zeros.
				; ----------------------------------------------------
 000002E5			_checkNextChar:

					; See if a character previously written to output is non-zero
 000002E5  8A 18			mov				BL, BYTE PTR [EAX]
 000002E7  80 FB 31			cmp				BL, 31h
 000002EA  7D 0B			jge				_nonLeadingZero

					; If not, check next character
 000002EC  40				inc				EAX
 000002ED  3B F8			cmp				EDI, EAX
 000002EF  7E 02			jle				_leadingZero
 000002F1  EB F2			jmp				_checkNextChar

				; ---------------------------------------------------- 
				; QUOTIENT IS A LEADING ZERO
				;
				;	When the quotient is a leading zero, we only need
				;	to restore our registers and skip the saving step.
				; ----------------------------------------------------
 000002F3			_leadingZero:

					; Restore registers
 000002F3  5B				pop				EBX
 000002F4  58				pop				EAX

 000002F5  EB 06			jmp				_saveCharEnd

				; ---------------------------------------------------- 
				; QUOTIENT IS A NON-LEADING ZERO
				;
				;	When the quotient is a non-leading zero, we restore
				;	our registers and then follow the normal save step.
				; ----------------------------------------------------
 000002F7			_nonLeadingZero:

					; Restore registers
 000002F7  5B				pop				EBX
 000002F8  58				pop				EAX

 000002F9			_saveChar:

					; Save digit to output array
 000002F9  83 C0 30			add				EAX, 30h
 000002FC  AA				STOSB

 000002FD			_saveCharEnd:

					; Divide EBX (integer divisor) by 10
 000002FD  8B C3			mov				EAX, EBX
 000002FF  99				cdq
 00000300  BB 0000000A			mov				EBX, 10
 00000305  F7 F3			div				EBX
 00000307  8B D8			mov				EBX, EAX

					; Restore remainder 
 00000309  5A				pop				EDX

 0000030A  E2 C4			loop			_getChar

					; Terminate string
 0000030C  B8 00000000			mov				EAX, 0
 00000311  AA				STOSB

					; Display output string
					mDisplayString	[EBP + 32]
 00000312  52		     1		push			EDX
 00000313  8B 55 20	     1		mov				EDX, [EBP + 32]
 00000316  E8 00000000 E     1		call			WriteString
 0000031B  5A		     1		pop				EDX

					; Clear output string
 0000031C  B9 0000000F			mov				ECX, MAX_INPUT_LENGTH
 00000321  8B 7D 20			mov				EDI, [EBP + 32]
 00000324  B8 00000000			mov				EAX, 0
 00000329  F3/ AA			rep				STOSB

 0000032B  5D				pop				EBP
 0000032C  5F		   *	    pop    edi
 0000032D  5A		   *	    pop    edx
 0000032E  59		   *	    pop    ecx
 0000032F  5B		   *	    pop    ebx
 00000330  58		   *	    pop    eax
 00000331  C2 0008			ret				8
 00000334			WriteVal ENDP

				; --------------------------------------------------------------------------------- 
				; Name: printOutput 
				;  
				; Description: This procedure prints each of the numbers in the argument array. It
				;				then calculates and prints the sum of the numbers, as well as the
				;				rounded average of the numbers.
				; 
				; Preconditions: Argument addresses should be valid.
				; 
				; Postconditions: Registers are restored after procedure call. Data at addresses should be initialized.
				; 
				; Receives: [EBP + 28] -> Address offset of title for entered numbers ("You entered these numbers: ").
				;			[EBP + 32] -> Address offset of title for sum of numbers ("The sum is: ").
				;			[EBP + 36] -> Address offset of title for average of numbers ("The average is: ").
				;			[EBP + 40] -> Address offset of the array of numbers to be displayed, summed, and averaged.
				;			[EBP + 44] -> Address offset of where each output string should be saved.
				;
				; Returns: The following data may be changed after this procedure:
				;			[EBP + 44] -> Address offset of where each output string should be saved.
				; ---------------------------------------------------------------------------------
 00000334			printOutput PROC uses EAX EBX ECX EDX ESI
 00000334  50		   *	    push   eax
 00000335  53		   *	    push   ebx
 00000336  51		   *	    push   ecx
 00000337  52		   *	    push   edx
 00000338  56		   *	    push   esi
 00000339  55				push			EBP
 0000033A  8B EC			mov				EBP, ESP

					; Set up registers
 0000033C  B9 0000000A			mov				ECX, INTEGER_COUNT
 00000341  8B 75 28			mov				ESI, [EBP + 40]

					; Print Title for entered numbers
 00000344  E8 00000000 E		call			CrLf
					mDisplayString	[EBP + 28]
 00000349  52		     1		push			EDX
 0000034A  8B 55 1C	     1		mov				EDX, [EBP + 28]
 0000034D  E8 00000000 E     1		call			WriteString
 00000352  5A		     1		pop				EDX

 00000353			_printNumber:

					; Move next index value into EAX
 00000353  AD				LODSD

					; Write number value as a string
 00000354  FF 75 2C			push			[EBP + 44]							; Output string offset
 00000357  50				push			EAX									; Integer Value to convert to string
 00000358  E8 FFFFFF4C			call			WriteVal

					; Unless we're on the last number, print a comma and a space between numbers
 0000035D  83 F9 01			cmp				ECX, 1
 00000360  74 10			je				_calculateSum

 00000362  B0 2C			mov				AL, ','
 00000364  E8 00000000 E		call			WriteChar
 00000369  B0 20			mov				AL, ' '
 0000036B  E8 00000000 E		call			WriteChar
 00000370  E2 E1			loop			_printNumber

 00000372			_calculateSum:

					; Set up registers
 00000372  B9 0000000A			mov				ECX, INTEGER_COUNT
 00000377  8B 75 28			mov				ESI, [EBP + 40]
 0000037A  BB 00000000			mov				EBX, 0								; Store Sum
 0000037F			_sumNext:

					; Load next array value into EAX
 0000037F  AD				LODSD
 00000380  03 D8			add				EBX, EAX
 00000382  E2 FB			loop			_sumNext

					; Display Sum Title
 00000384  E8 00000000 E		call			CrLf
 00000389  E8 00000000 E		call			CrLf
					mDisplayString	[EBP + 32]
 0000038E  52		     1		push			EDX
 0000038F  8B 55 20	     1		mov				EDX, [EBP + 32]
 00000392  E8 00000000 E     1		call			WriteString
 00000397  5A		     1		pop				EDX

					; Display Sum
 00000398  8B C3			mov				EAX, EBX
 0000039A  FF 75 2C			push			[EBP + 44]							; Output string offset
 0000039D  50				push			EAX									; Integer Value to convert to string
 0000039E  E8 FFFFFF06			call			WriteVal

 000003A3			_calculateAverage:

					; Divide Sum by number of intergers entered by the user
 000003A3  BB 0000000A			mov				EBX, INTEGER_COUNT
 000003A8  99				cdq
 000003A9  F7 FB			idiv			EBX									; Quotient = EAX. Remainder = EDX.

					; Display Average Title
 000003AB  E8 00000000 E		call			CrLf
 000003B0  E8 00000000 E		call			CrLf
					mDisplayString	[EBP + 36]
 000003B5  52		     1		push			EDX
 000003B6  8B 55 24	     1		mov				EDX, [EBP + 36]
 000003B9  E8 00000000 E     1		call			WriteString
 000003BE  5A		     1		pop				EDX

					; Display Average
 000003BF  FF 75 2C			push			[EBP + 44]							; Output string offset
 000003C2  50				push			EAX									; Integer Value to convert to string
 000003C3  E8 FFFFFEE1			call			WriteVal

 000003C8  5D				pop				EBP
 000003C9  5E		   *	    pop    esi
 000003CA  5A		   *	    pop    edx
 000003CB  59		   *	    pop    ecx
 000003CC  5B		   *	    pop    ebx
 000003CD  58		   *	    pop    eax
 000003CE  C2 0010			ret				16
 000003D1			printOutput ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30040.0	    08/09/21 15:24:09
<Project 6 - String Primitives and Macros     (Proj6_nolann.  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000277 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003D1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 000000D8 Public STDCALL
  _getInput  . . . . . . . . . .	L Near	 000000AB _TEXT	
  _sumNextInteger  . . . . . . .	L Near	 000000BF _TEXT	
  _errorMessage  . . . . . . . .	L Near	 00000158 _TEXT	
  _errorMessageEnd . . . . . . .	L Near	 00000170 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002A9 _TEXT	Length= 0000008B Public STDCALL
  _negativeNumber  . . . . . . .	L Near	 000002C8 _TEXT	
  _getChar . . . . . . . . . . .	L Near	 000002D0 _TEXT	
  _checkNextChar . . . . . . . .	L Near	 000002E5 _TEXT	
  _leadingZero . . . . . . . . .	L Near	 000002F3 _TEXT	
  _nonLeadingZero  . . . . . . .	L Near	 000002F7 _TEXT	
  _saveChar  . . . . . . . . . .	L Near	 000002F9 _TEXT	
  _saveCharEnd . . . . . . . . .	L Near	 000002FD _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A2 Public STDCALL
  _getUserInput  . . . . . . . .	L Near	 0000002E _TEXT	
printOutput  . . . . . . . . . .	P Near	 00000334 _TEXT	Length= 0000009D Public STDCALL
  _printNumber . . . . . . . . .	L Near	 00000353 _TEXT	
  _calculateSum  . . . . . . . .	L Near	 00000372 _TEXT	
  _sumNext . . . . . . . . . . .	L Near	 0000037F _TEXT	
  _calculateAverage  . . . . . .	L Near	 000003A3 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stringToSDWORD . . . . . . . . .	P Near	 00000235 _TEXT	Length= 00000074 Public STDCALL
  _addInteger  . . . . . . . . .	L Near	 00000256 _TEXT	
  _multiplyBySignFlag  . . . . .	L Near	 0000027F _TEXT	
  _overflowError . . . . . . . .	L Near	 00000295 _TEXT	
  _stringToSDWORDEnd . . . . . .	L Near	 0000029F _TEXT	
validateCharacter  . . . . . . .	P Near	 00000214 _TEXT	Length= 00000021 Public STDCALL
  _error . . . . . . . . . . . .	L Near	 00000227 _TEXT	
  _errorEnd  . . . . . . . . . .	L Near	 00000230 _TEXT	
validateFirstCharacter . . . . .	P Near	 000001DB _TEXT	Length= 00000039 Public STDCALL
  _minusSign . . . . . . . . . .	L Near	 000001F9 _TEXT	
  _errorFirstChar  . . . . . . .	L Near	 00000205 _TEXT	
  _errorFirstCharEnd . . . . . .	L Near	 0000020E _TEXT	
validateString . . . . . . . . .	P Near	 0000017A _TEXT	Length= 00000061 Public STDCALL
  _nextCharacter . . . . . . . .	L Near	 000001AA _TEXT	
  _inputLengthError  . . . . . .	L Near	 000001CA _TEXT	
  _validateEnd . . . . . . . . .	L Near	 000001D3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INTEGER_COUNT  . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_INPUT_LENGTH . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000248 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 000001AC _DATA	
inputErrorFlag . . . . . . . . .	DWord	 000001A4 _DATA	
inputErrorMsg  . . . . . . . . .	Byte	 00000161 _DATA	
inputLength  . . . . . . . . . .	DWord	 000001A0 _DATA	
inputRequest . . . . . . . . . .	Byte	 00000143 _DATA	
inputSign  . . . . . . . . . . .	DWord	 000001A8 _DATA	
inputTotal . . . . . . . . . . .	Byte	 00000130 _DATA	
instructions . . . . . . . . . .	Byte	 0000003C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputAverage  . . . . . . . . .	Byte	 0000020D _DATA	
outputNumbers  . . . . . . . . .	Byte	 000001D4 _DATA	
outputString . . . . . . . . . .	Byte	 00000239 _DATA	
outputSum  . . . . . . . . . . .	Byte	 000001F1 _DATA	
programByline  . . . . . . . . .	Byte	 0000002B _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	Byte	 00000191 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
